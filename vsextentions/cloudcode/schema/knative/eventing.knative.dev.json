{
  "type": "object",
  "anyOf": [
    {
      "$ref": "#/definitions/Broker"
    },
    {
      "$ref": "#/definitions/BrokerList"
    },
    {
      "$ref": "#/definitions/Channel"
    },
    {
      "$ref": "#/definitions/ChannelList"
    },
    {
      "$ref": "#/definitions/ClusterChannelProvisioner"
    },
    {
      "$ref": "#/definitions/ClusterChannelProvisionerList"
    },
    {
      "$ref": "#/definitions/Subscription"
    },
    {
      "$ref": "#/definitions/SubscriptionList"
    },
    {
      "$ref": "#/definitions/Trigger"
    },
    {
      "$ref": "#/definitions/TriggerList"
    }
  ],
  "definitions": {
    "Broker": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "+optional\n"
        },
        "spec": {
          "$ref": "#/definitions/BrokerSpec",
          "description": "Spec defines the desired state of the Broker.\n"
        },
        "status": {
          "$ref": "#/definitions/BrokerStatus",
          "description": "Status represents the current state of the Broker. This data may be out of\ndate.\n+optional\n"
        }
      }
    },
    "BrokerList": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/Broker"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "+optional\n"
        }
      },
      "description": "BrokerList is a collection of Brokers.\n"
    },
    "BrokerSpec": {
      "properties": {
        "channelTemplate": {
          "$ref": "#/definitions/ChannelSpec",
          "description": "ChannelTemplate, if specified will be used to create all the Channels used internally by the\nBroker. Only Provisioner and Arguments may be specified. If left unspecified, the default\nChannel for the namespace will be used.\n\n+optional\n"
        }
      }
    },
    "BrokerStatus": {
      "properties": {
        "address": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.Addressable",
          "description": "Broker is Addressable. It currently exposes the endpoint as a\nfully-qualified DNS name which will distribute traffic over the\nprovided targets from inside the cluster.\n\nIt generally has the form {broker}-router.{namespace}.svc.{cluster domain name}\n"
        },
        "conditions": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.Conditions",
          "description": "Conditions the latest available observations of a resource's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n"
        },
        "observedGeneration": {
          "type": "integer",
          "description": "ObservedGeneration is the 'Generation' of the Service that\nwas last processed by the controller.\n+optional\n"
        }
      },
      "description": "BrokerStatus represents the current state of a Broker.\n"
    },
    "Channel": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "+optional\n"
        },
        "spec": {
          "$ref": "#/definitions/ChannelSpec",
          "description": "Spec defines the desired state of the Channel.\n"
        },
        "status": {
          "$ref": "#/definitions/ChannelStatus",
          "description": "Status represents the current state of the Channel. This data may be out of\ndate.\n+optional\n"
        }
      },
      "description": "Channel is an abstract resource that implements the Addressable contract.\nThe Provisioner provisions infrastructure to accepts events and\ndeliver to Subscriptions.\n"
    },
    "ChannelList": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/Channel"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "+optional\n"
        }
      },
      "description": "ChannelList is a collection of Channels.\n"
    },
    "ChannelSpec": {
      "properties": {
        "arguments": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.runtime.RawExtension",
          "description": "Arguments defines the arguments to pass to the Provisioner which\nprovisions this Channel.\n+optional\n"
        },
        "generation": {
          "type": "integer",
          "description": "TODO By enabling the status subresource metadata.generation should increment\nthus making this property obsolete.\n\nWe should be able to drop this property with a CRD conversion webhook\nin the future\n\n+optional\n"
        },
        "provisioner": {
          "$ref": "#/definitions/k8s.io.api.core.v1.ObjectReference",
          "description": "Provisioner defines the name of the Provisioner backing this channel.\n"
        },
        "subscribable": {
          "$ref": "#/definitions/github.com.knative.eventing.pkg.apis.duck.v1alpha1.Subscribable",
          "description": "Channel conforms to Duck type Subscribable.\n"
        }
      },
      "description": "ChannelSpec specifies the Provisioner backing a channel and the configuration\narguments for a Channel.\n"
    },
    "ChannelStatus": {
      "properties": {
        "address": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.Addressable",
          "description": "Channel is Addressable. It currently exposes the endpoint as a\nfully-qualified DNS name which will distribute traffic over the\nprovided targets from inside the cluster.\n\nIt generally has the form {channel}.{namespace}.svc.{cluster domain name}\n"
        },
        "conditions": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.Conditions",
          "description": "Conditions the latest available observations of a resource's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n"
        },
        "internal": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.runtime.RawExtension",
          "description": "Internal is status unique to each ClusterChannelProvisioner.\n+optional\n"
        },
        "observedGeneration": {
          "type": "integer",
          "description": "ObservedGeneration is the 'Generation' of the Service that\nwas last processed by the controller.\n+optional\n"
        }
      },
      "description": "ChannelStatus represents the current state of a Channel.\n"
    },
    "ClusterChannelProvisioner": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "+optional\n"
        },
        "spec": {
          "$ref": "#/definitions/ClusterChannelProvisionerSpec",
          "description": "Spec defines the Types provisioned by this Provisioner.\n"
        },
        "status": {
          "$ref": "#/definitions/ClusterChannelProvisionerStatus",
          "description": "Status is the current status of the Provisioner.\n+optional\n"
        }
      },
      "description": "ClusterChannelProvisioner encapsulates a provisioning strategy for the\nbacking resources required to realize a particular resource type.\n"
    },
    "ClusterChannelProvisionerList": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/ClusterChannelProvisioner"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "description": "ClusterChannelProvisionerList is a list of ClusterChannelProvisioner resources\n"
    },
    "ClusterChannelProvisionerSpec": {
      "properties": {
        "generation": {
          "type": "integer",
          "description": "TODO By enabling the status subresource metadata.generation should increment\nthus making this property obsolete.\n\nWe should be able to drop this property with a CRD conversion webhook\nin the future\n\n+optional\n"
        }
      },
      "description": "ClusterChannelProvisionerSpec is the spec for a ClusterChannelProvisioner resource.\n"
    },
    "ClusterChannelProvisionerStatus": {
      "properties": {
        "conditions": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.Conditions",
          "description": "Conditions holds the state of a cluster provisioner at a point in time.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n"
        },
        "observedGeneration": {
          "type": "integer",
          "description": "ObservedGeneration is the 'Generation' of the ClusterChannelProvisioner that\nwas last reconciled by the controller.\n+optional\n"
        }
      },
      "description": "ClusterChannelProvisionerStatus is the status for a ClusterChannelProvisioner resource\n"
    },
    "ReplyStrategy": {
      "properties": {
        "channel": {
          "$ref": "#/definitions/k8s.io.api.core.v1.ObjectReference",
          "description": "This object must be a Channel.\n\nYou can specify only the following fields of the ObjectReference:\n  - Kind\n  - APIVersion\n  - Name\nKind must be \"Channel\" and APIVersion must be\n\"eventing.knative.dev/v1alpha1\"\n+optional\n"
        }
      },
      "description": "ReplyStrategy specifies the handling of the SubscriberSpec's returned replies.\nIf no SubscriberSpec is specified, the identity function is assumed.\n"
    },
    "SubscriberSpec": {
      "properties": {
        "dnsName": {
          "type": "string",
          "description": "Deprecated: Use URI instead.\nReference to a 'known' endpoint where no resolving is done.\nhttp://k8s-service for example\nhttp://myexternalhandler.example.com/foo/bar\n+optional\n"
        },
        "ref": {
          "$ref": "#/definitions/k8s.io.api.core.v1.ObjectReference",
          "description": "Reference to an object that will be used to find the target\nendpoint, which should implement the Addressable duck type.\nFor example, this could be a reference to a Route resource\nor a Knative Service resource.\nTODO: Specify the required fields the target object must\nhave in the status.\nYou can specify only the following fields of the ObjectReference:\n  - Kind\n  - APIVersion\n  - Name\n+optional\n"
        },
        "uri": {
          "type": "string",
          "description": "Reference to a 'known' endpoint where no resolving is done.\nhttp://k8s-service for example\nhttp://myexternalhandler.example.com/foo/bar\n+optional\n"
        }
      },
      "description": "SubscriberSpec specifies the reference to an object that's expected to\nprovide the resolved target of the action.\nCurrently we inspect the objects Status and see if there's a predefined\nStatus field that we will then use to dispatch events to be processed by\nthe target. Currently must resolve to a k8s service or Istio virtual\nservice.\nNote that in the future we should try to utilize subresources (/resolve ?) to\nmake this cleaner, but CRDs do not support subresources yet, so we need\nto rely on a specified Status field today. By relying on this behaviour\nwe can utilize a dynamic client instead of having to understand all\nkinds of different types of objects. As long as they adhere to this\nparticular contract, they can be used as a Target.\n\nThis ensures that we can support external targets and for ease of use\nwe also allow for an URI to be specified.\nThere of course is also a requirement for the resolved SubscriberSpec to\nbehave properly at the data plane level.\nTODO: Add a pointer to a real spec for this.\nFor now, this means: Receive an event payload, and respond with one of:\nsuccess and an optional response event, or failure.\nDelivery failures may be retried by the channel\n"
    },
    "Subscription": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/SubscriptionSpec"
        },
        "status": {
          "$ref": "#/definitions/SubscriptionStatus"
        }
      },
      "description": "Subscription routes events received on a Channel to a DNS name and\ncorresponds to the subscriptions.channels.knative.dev CRD.\n"
    },
    "SubscriptionList": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/Subscription"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "description": "SubscriptionList returned in list operations\n"
    },
    "SubscriptionSpec": {
      "properties": {
        "channel": {
          "$ref": "#/definitions/k8s.io.api.core.v1.ObjectReference",
          "description": "Reference to a channel that will be used to create the subscription\nfor receiving events. The channel must have spec.subscriptions\nlist which will then be modified accordingly.\n\nYou can specify only the following fields of the ObjectReference:\n  - Kind\n  - APIVersion\n  - Name\nKind must be \"Channel\" and APIVersion must be\n\"eventing.knative.dev/v1alpha1\"\n\nThis field is immutable. We have no good answer on what happens to\nthe events that are currently in the channel being consumed from\nand what the semantics there should be. For now, you can always\ndelete the Subscription and recreate it to point to a different\nchannel, giving the user more control over what semantics should\nbe used (drain the channel first, possibly have events dropped,\netc.)\n"
        },
        "generation": {
          "type": "integer",
          "description": "TODO By enabling the status subresource metadata.generation should increment\nthus making this property obsolete.\n\nWe should be able to drop this property with a CRD conversion webhook\nin the future\n\n+optional\n"
        },
        "reply": {
          "$ref": "#/definitions/ReplyStrategy",
          "description": "Reply specifies (optionally) how to handle events returned from\nthe Subscriber target.\n+optional\n"
        },
        "subscriber": {
          "$ref": "#/definitions/SubscriberSpec",
          "description": "Subscriber is reference to (optional) function for processing events.\nEvents from the Channel will be delivered here and replies are\nsent to a channel as specified by the Reply.\n+optional\n"
        }
      },
      "description": "SubscriptionSpec specifies the Channel for incoming events, a Subscriber target\nfor processing those events and where to put the result of the processing. Only\nFrom (where the events are coming from) is always required. You can optionally\nonly Process the events (results in no output events) by leaving out the Result.\nYou can also perform an identity transformation on the invoming events by leaving\nout the Subscriber and only specifying Result.\n\nThe following are all valid specifications:\nchannel --[subscriber]--\u003e reply\nSink, no outgoing events:\nchannel -- subscriber\nno-op function (identity transformation):\nchannel --\u003e reply\n"
    },
    "SubscriptionStatus": {
      "properties": {
        "conditions": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.Conditions",
          "description": "Conditions the latest available observations of a resource's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n"
        },
        "observedGeneration": {
          "type": "integer",
          "description": "ObservedGeneration is the 'Generation' of the Service that\nwas last processed by the controller.\n+optional\n"
        },
        "physicalSubscription": {
          "$ref": "#/definitions/SubscriptionStatusPhysicalSubscription",
          "description": "PhysicalSubscription is the fully resolved values that this Subscription represents.\n"
        }
      },
      "description": "SubscriptionStatus (computed) for a subscription\n"
    },
    "SubscriptionStatusPhysicalSubscription": {
      "properties": {
        "replyURI": {
          "type": "string",
          "description": "ReplyURI is the fully resolved URI for the spec.reply.\n"
        },
        "subscriberURI": {
          "type": "string",
          "description": "SubscriberURI is the fully resolved URI for spec.subscriber.\n"
        }
      },
      "description": "SubscriptionStatusPhysicalSubscription represents the fully resolved values for this\nSubscription.\n"
    },
    "Trigger": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "+optional\n"
        },
        "spec": {
          "$ref": "#/definitions/TriggerSpec",
          "description": "Spec defines the desired state of the Trigger.\n"
        },
        "status": {
          "$ref": "#/definitions/TriggerStatus",
          "description": "Status represents the current state of the Trigger. This data may be out of\ndate.\n+optional\n"
        }
      }
    },
    "TriggerFilter": {
      "properties": {
        "sourceAndType": {
          "$ref": "#/definitions/TriggerFilterSourceAndType"
        }
      }
    },
    "TriggerFilterSourceAndType": {
      "properties": {
        "source": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "description": "TriggerFilterSourceAndType filters events based on exact matches on the cloud event's type and\nsource attributes. Only exact matches will pass the filter. Either or both type and source can\nuse the value 'Any' to indicate all strings match.\n"
    },
    "TriggerList": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/Trigger"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "+optional\n"
        }
      },
      "description": "TriggerList is a collection of Triggers.\n"
    },
    "TriggerSpec": {
      "properties": {
        "broker": {
          "type": "string",
          "description": "Broker is the broker that this trigger receives events from. If not specified, will default\nto 'default'.\n"
        },
        "filter": {
          "$ref": "#/definitions/TriggerFilter",
          "description": "Filter is the filter to apply against all events from the Broker. Only events that pass this\nfilter will be sent to the Subscriber. If not specified, will default to allowing all events.\n\n+optional\n"
        },
        "subscriber": {
          "$ref": "#/definitions/SubscriberSpec",
          "description": "Subscriber is the addressable that receives events from the Broker that pass the Filter. It\nis required.\n"
        }
      }
    },
    "TriggerStatus": {
      "properties": {
        "conditions": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.Conditions",
          "description": "Conditions the latest available observations of a resource's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n"
        },
        "observedGeneration": {
          "type": "integer",
          "description": "ObservedGeneration is the 'Generation' of the Service that\nwas last processed by the controller.\n+optional\n"
        },
        "subscriberURI": {
          "type": "string",
          "description": "SubscriberURI is the resolved URI of the receiver for this Trigger.\n"
        }
      },
      "description": "TriggerStatus represents the current state of a Trigger.\n"
    },
    "github.com.knative.eventing.pkg.apis.duck.v1alpha1.ChannelSubscriberSpec": {
      "properties": {
        "ref": {
          "$ref": "#/definitions/k8s.io.api.core.v1.ObjectReference",
          "description": "+optional\n"
        },
        "replyURI": {
          "type": "string",
          "description": "+optional\n"
        },
        "subscriberURI": {
          "type": "string",
          "description": "+optional\n"
        }
      },
      "description": "ChannelSubscriberSpec defines a single subscriber to a Channel.\nRef is a reference to the Subscription this ChannelSubscriberSpec was created for\nSubscriberURI is the endpoint for the subscriber\nReplyURI is the endpoint for the reply\nAt least one of SubscriberURI and ReplyURI must be present\n"
    },
    "github.com.knative.eventing.pkg.apis.duck.v1alpha1.Subscribable": {
      "properties": {
        "subscribers": {
          "items": {
            "$ref": "#/definitions/github.com.knative.eventing.pkg.apis.duck.v1alpha1.ChannelSubscriberSpec"
          },
          "type": "array",
          "description": "TODO: What is actually required here for Channel spec.\nThis is the list of subscriptions for this channel.\n"
        }
      },
      "description": "Subscribable is the schema for the subscribable portion of the spec\nsection of the resource.\n"
    },
    "github.com.knative.pkg.apis.VolatileTime": {
      "description": "VolatileTime wraps metav1.Time\n"
    },
    "github.com.knative.pkg.apis.duck.v1alpha1.Addressable": {
      "properties": {
        "hostname": {
          "type": "string"
        }
      },
      "description": "Addressable is the schema for the destination information. This is\ntypically stored in the object's `status`, as this information may\nbe generated by the controller.\n"
    },
    "github.com.knative.pkg.apis.duck.v1alpha1.Condition": {
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.VolatileTime",
          "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nWe use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic\ndifferences (all other things held constant).\n+optional\n"
        },
        "message": {
          "type": "string",
          "description": "A human readable message indicating details about the transition.\n+optional\n"
        },
        "reason": {
          "type": "string",
          "description": "The reason for the condition's last transition.\n+optional\n"
        },
        "severity": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.ConditionSeverity",
          "description": "Severity with which to treat failures of this type of condition.\nWhen this is not specified, it defaults to Error.\n+optional\n"
        },
        "status": {
          "$ref": "#/definitions/k8s.io.api.core.v1.ConditionStatus",
          "description": "Status of the condition, one of True, False, Unknown.\n+required\n"
        },
        "type": {
          "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.ConditionType",
          "description": "Type of condition.\n+required\n"
        }
      },
      "description": "Conditions defines a readiness condition for a Knative resource.\nSee: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#typical-status-properties\n+k8s:deepcopy-gen=true\n"
    },
    "github.com.knative.pkg.apis.duck.v1alpha1.ConditionSeverity": {
      "type": "string",
      "description": "ConditionSeverity expresses the severity of a Condition Type failing.\n"
    },
    "github.com.knative.pkg.apis.duck.v1alpha1.ConditionType": {
      "type": "string",
      "description": "ConditionType is a camel-cased condition type.\n"
    },
    "github.com.knative.pkg.apis.duck.v1alpha1.Conditions": {
      "items": {
        "$ref": "#/definitions/github.com.knative.pkg.apis.duck.v1alpha1.Condition"
      },
      "type": "array",
      "description": "Conditions is the schema for the conditions portion of the payload\n"
    },
    "k8s.io.api.core.v1.ConditionStatus": {
      "type": "string"
    },
    "k8s.io.api.core.v1.ObjectReference": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent.\n+optional\n"
        },
        "fieldPath": {
          "type": "string",
          "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n+optional\n"
        },
        "resourceVersion": {
          "type": "string",
          "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n+optional\n"
        },
        "uid": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.types.UID",
          "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\n+optional\n"
        }
      },
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.CauseType": {
      "type": "string",
      "description": "CauseType is a machine readable value providing more detail about what\noccurred in a status response. An operation may have multiple causes for a\nstatus (whether Failure or Success).\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.Initializer": {
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the process that is responsible for initializing this object.\n"
        }
      },
      "description": "Initializer is information about an initializer that has not yet completed.\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.Initializers": {
      "properties": {
        "pending": {
          "items": {
            "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Initializer"
          },
          "type": "array",
          "description": "Pending is a list of initializers that must execute in order before this object is visible.\nWhen the last pending initializer is removed, and no failing result is set, the initializers\nstruct will be set to nil and the object is considered as initialized and visible to all\nclients.\n+patchMergeKey=name\n+patchStrategy=merge\n"
        },
        "result": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Status",
          "description": "If result is set with the Failure field, the object will be persisted to storage and then deleted,\nensuring that other clients can observe the deletion.\n"
        }
      },
      "description": "Initializers tracks the progress of initialization.\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "properties": {
        "continue": {
          "type": "string",
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nlist may not be possible if the server configuration has changed or more than a few minutes have\npassed. The resourceVersion field returned when using this continue value will be identical to\nthe value in the first response.\n"
        },
        "resourceVersion": {
          "type": "string",
          "description": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n+optional\n"
        },
        "selfLink": {
          "type": "string",
          "description": "selfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n+optional\n"
        }
      },
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and\nvarious status objects. A resource may have only one of {ObjectMeta, ListMeta}.\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional\n"
        },
        "clusterName": {
          "type": "string",
          "description": "The name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in different clusters.\nThis field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n+optional\n"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n+optional\n"
        },
        "deletionGracePeriodSeconds": {
          "type": "integer",
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional\n"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n+optional\n"
        },
        "finalizers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\n+optional\n+patchStrategy=merge\n"
        },
        "generateName": {
          "type": "string",
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency\n+optional\n"
        },
        "generation": {
          "type": "integer",
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional\n"
        },
        "initializers": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Initializers",
          "description": "An initializer is a controller which enforces some system invariant at object creation time.\nThis field is a list of initializers that have not yet acted on this object. If nil or empty,\nthis object has been completely initialized. Otherwise, the object is considered uninitialized\nand is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\nobserve uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers.\nOnly privileged users may set or modify this list. Once it is empty, it may not be modified further\nby any user.\n"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional\n"
        },
        "name": {
          "type": "string",
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional\n"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace defines the space within each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional\n"
        },
        "ownerReferences": {
          "items": {
            "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge\n"
        },
        "resourceVersion": {
          "type": "string",
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency\n+optional\n"
        },
        "selfLink": {
          "type": "string",
          "description": "SelfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n+optional\n"
        },
        "uid": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.types.UID",
          "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional\n"
        }
      },
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create.\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent.\n"
        },
        "blockOwnerDeletion": {
          "type": "boolean",
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional\n"
        },
        "controller": {
          "type": "boolean",
          "description": "If true, this reference points to the managing controller.\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n"
        },
        "uid": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.types.UID",
          "description": "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
        }
      },
      "description": "OwnerReference contains enough information to let you identify an owning\nobject. Currently, an owning object must be in the same namespace, so there\nis no namespace field.\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.Status": {
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n+optional\n"
        },
        "code": {
          "type": "integer",
          "description": "Suggested HTTP return code for this status, 0 if not set.\n+optional\n"
        },
        "details": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails",
          "description": "Extended data associated with the reason.  Each reason may define its\nown extended details. This field is optional and the data returned\nis not guaranteed to conform to any schema except that defined by\nthe reason type.\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the status of this operation.\n+optional\n"
        },
        "metadata": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "reason": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.StatusReason",
          "description": "A machine-readable description of why this operation is in the\n\"Failure\" status. If this value is empty there\nis no information available. A Reason clarifies an HTTP status\ncode but does not override it.\n+optional\n"
        },
        "status": {
          "type": "string",
          "description": "Status of the operation.\nOne of: \"Success\" or \"Failure\".\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n+optional\n"
        }
      },
      "description": "Status is a return value for calls that don't return other objects.\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "properties": {
        "field": {
          "type": "string",
          "description": "The field of the resource that has caused this error, as named by its JSON\nserialization. May include dot and postfix notation for nested attributes.\nArrays are zero-indexed.  Fields may appear more than once in an array of\ncauses due to fields having multiple errors.\nOptional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"\n+optional\n"
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the cause of the error.  This field may be\npresented as-is to a reader.\n+optional\n"
        },
        "reason": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.CauseType",
          "description": "A machine-readable description of the cause of the error. If this value is\nempty there is no information available.\n+optional\n"
        }
      },
      "description": "StatusCause provides more information about an api.Status failure, including\ncases when multiple errors are encountered.\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "properties": {
        "causes": {
          "items": {
            "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.StatusCause"
          },
          "type": "array",
          "description": "The Causes array includes more details associated with the StatusReason\nfailure. Not all StatusReasons may provide detailed causes.\n+optional\n"
        },
        "group": {
          "type": "string",
          "description": "The group attribute of the resource associated with the status StatusReason.\n+optional\n"
        },
        "kind": {
          "type": "string",
          "description": "The kind attribute of the resource associated with the status StatusReason.\nOn some operations may differ from the requested resource Kind.\nMore info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n+optional\n"
        },
        "name": {
          "type": "string",
          "description": "The name attribute of the resource associated with the status StatusReason\n(when there is a single name which can be described).\n+optional\n"
        },
        "retryAfterSeconds": {
          "type": "integer",
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate\nthe client must take an alternate action - for those errors this field may indicate how long to wait\nbefore taking the alternate action.\n+optional\n"
        },
        "uid": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.types.UID",
          "description": "UID of the resource.\n(when there is a single resource which can be described).\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional\n"
        }
      },
      "description": "StatusDetails is a set of additional properties that MAY be set by the\nserver to provide additional information about a response. The Reason\nfield of a Status object defines what attributes will be set. Clients\nmust ignore fields that do not match the defined type of each attribute,\nand should assume that any attribute may be empty, invalid, or under\ndefined.\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.StatusReason": {
      "type": "string",
      "description": "StatusReason is an enumeration of possible failure causes.  Each StatusReason\nmust map to a single HTTP status code, but multiple reasons may map\nto the same HTTP status code.\nTODO: move to apiserver\n"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false\n",
      "type": "string",
      "format": "date-time"
    },
    "k8s.io.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned\nstruct, and Object in your internal struct. You also need to register your\nvarious plugin types.\n\n// Internal package:\ntype MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n}\ntype PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package:\ntype MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n}\ntype PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this:\n{\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into\nyour external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.\nThe next step is to copy (using pkg/conversion) into the internal struct. The runtime\npackage's DefaultScheme has conversion functions installed which will unpack the\nJSON stored in RawExtension, turning it into the correct object type, and storing it\nin the Object. (TODO: In the case where the object is of an unknown type, a\nruntime.Unknown object will be created and stored.)\n\n+k8s:deepcopy-gen=true\n+protobuf=true\n+k8s:openapi-gen=true\n",
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.types.UID": {
      "type": "string",
      "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.\n"
    }
  }
}
