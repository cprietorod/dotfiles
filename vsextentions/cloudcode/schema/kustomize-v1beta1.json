{
  "type": "object",
  "anyOf": [
    {
      "$ref": "#/definitions/Kustomization"
    }
  ],
  "definitions": {
    "Kustomization": {
      "description": "Kustomization holds the information needed to generate customized k8s api resources.\n",
      "properties": {
        "apiVersion": {
          "description": "APIVersion copies apimachinery/pkg/apis/meta/v1.Typemeta.APIVersion\n",
          "type": "string"
        },
        "bases": {
          "description": "Bases are relative paths or github repository URLs specifying a\ndirectory containing a kustomization.yaml file.\nURL format: https://github.com/hashicorp/go-getter#url-format\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "commonAnnotations": {
          "description": "CommonAnnotations to add to all objects.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "commonLabels": {
          "description": "CommonLabels to add to all objects and selectors.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "configMapGenerator": {
          "description": "ConfigMapGenerator is a list of configmaps to generate from\nlocal data (one configMap per list item).\nThe resulting resource is a normal operand, subject to\nname prefixing, patching, etc.  By default, the name of\nthe map will have a suffix hash generated from its contents.\n",
          "type": "array",
          "items": {
            "properties": {
              "behavior": {
                "description": "Behavior of generated resource, must be one of:\n  'create': create a new one\n  'replace': replace the existing one\n  'merge': merge with the existing one\n",
                "type": "string"
              },
              "env": {
                "description": "EnvSource format should be a path to a file to read lines of key=val\npairs to create a configmap.\ni.e. a Docker .env file or a .ini file.\n",
                "type": "string"
              },
              "files": {
                "description": "FileSources is a list of file sources.\nEach file source can be specified using its file path, in which case file\nbasename will be used as configmap key, or optionally with a key and file\npath, in which case the given key will be used.\nSpecifying a directory will iterate each named file in the directory\nwhose basename is a valid configmap key.\nIt will be similar to kubectl create configmap|secret --from-file\n",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "literals": {
                "description": "LiteralSources is a list of literal sources.\nEach literal source should be a key and literal value,\ne.g. `somekey=somevalue`\nIt will be similar to kubectl create configmap|secret --from-literal\n",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "description": "Name - actually the partial name - of the generated resource.\nThe full name ends up being something like\nNamePrefix + this.Name + hash(content of generated resource).\n",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace for the configmap, optional\n",
                "type": "string"
              }
            }
          }
        },
        "configurations": {
          "description": "Configurations is a list of transformer configuration files\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "crds": {
          "description": "Crds specifies relative paths to Custom Resource Definition files.\nThis allows custom resources to be recognized as operands, making\nit possible to add them to the Resources list.\nCRDs themselves are not modified.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "generatorOptions": {
          "description": "GeneratorOptions modify behavior of all ConfigMap and Secret generators.\n",
          "properties": {
            "annotations": {
              "description": "Annotations to add to all generated resources.\n",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "disableNameSuffixHash": {
              "description": "DisableNameSuffixHash if true disables the default behavior of adding a\nsuffix to the names of generated resources that is a hash of the\nresource contents.\n",
              "type": "boolean"
            },
            "labels": {
              "description": "Labels to add to all generated resources.\n",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "images": {
          "description": "Images is a list of (image name, new name, new tag or digest)\nfor changing image names, tags or digests. This can also be achieved with a\npatch, but this operator is simpler to specify.\n",
          "type": "array",
          "items": {
            "properties": {
              "digest": {
                "description": "Digest is the value used to replace the original image tag.\nIf digest is present NewTag value is ignored.\n",
                "type": "string"
              },
              "name": {
                "description": "Name is a tag-less image name.\n",
                "type": "string"
              },
              "newName": {
                "description": "NewName is the value used to replace the original name.\n",
                "type": "string"
              },
              "newTag": {
                "description": "NewTag is the value used to replace the original tag.\n",
                "type": "string"
              }
            }
          }
        },
        "kind": {
          "description": "Kind copies apimachinery/pkg/apis/meta/v1.Typemeta.Kind\n",
          "type": "string"
        },
        "namePrefix": {
          "description": "NamePrefix will prefix the names of all resources mentioned in the kustomization\nfile including generated configmaps and secrets.\n",
          "type": "string"
        },
        "nameSuffix": {
          "description": "NameSuffix will suffix the names of all resources mentioned in the kustomization\nfile including generated configmaps and secrets.\n",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to add to all objects.\n",
          "type": "string"
        },
        "patchesJson6902": {
          "description": "JSONPatches is a list of JSONPatch for applying JSON patch.\nFormat documented at https://tools.ietf.org/html/rfc6902\nand http://jsonpatch.com\n",
          "type": "array",
          "items": {
            "properties": {
              "path": {
                "description": "relative file path for a json patch file inside a kustomization\n",
                "type": "string"
              },
              "target": {
                "description": "Target refers to a Kubernetes object that the json patch will be\napplied to. It must refer to a Kubernetes resource under the\npurview of this kustomization. Target should use the\nraw name of the object (the name specified in its YAML,\nbefore addition of a namePrefix and a nameSuffix).\n",
                "properties": {
                  "group": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "patchesStrategicMerge": {
          "description": "PatchesStrategicMerge specifies the relative path to a file\ncontaining a strategic merge patch.  Format documented at\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/strategic-merge-patch.md\nURLs and globs are not supported.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources specifies relative paths to files holding YAML representations\nof kubernetes API objects. URLs and globs not supported.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretGenerator": {
          "description": "SecretGenerator is a list of secrets to generate from\nlocal data (one secret per list item).\nThe resulting resource is a normal operand, subject to\nname prefixing, patching, etc.  By default, the name of\nthe map will have a suffix hash generated from its contents.\n",
          "type": "array",
          "items": {
            "properties": {
              "behavior": {
                "description": "Behavior of generated resource, must be one of:\n  'create': create a new one\n  'replace': replace the existing one\n  'merge': merge with the existing one\n",
                "type": "string"
              },
              "env": {
                "description": "EnvSource format should be a path to a file to read lines of key=val\npairs to create a configmap.\ni.e. a Docker .env file or a .ini file.\n",
                "type": "string"
              },
              "files": {
                "description": "FileSources is a list of file sources.\nEach file source can be specified using its file path, in which case file\nbasename will be used as configmap key, or optionally with a key and file\npath, in which case the given key will be used.\nSpecifying a directory will iterate each named file in the directory\nwhose basename is a valid configmap key.\nIt will be similar to kubectl create configmap|secret --from-file\n",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "literals": {
                "description": "LiteralSources is a list of literal sources.\nEach literal source should be a key and literal value,\ne.g. `somekey=somevalue`\nIt will be similar to kubectl create configmap|secret --from-literal\n",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "description": "Name - actually the partial name - of the generated resource.\nThe full name ends up being something like\nNamePrefix + this.Name + hash(content of generated resource).\n",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace for the configmap, optional\n",
                "type": "string"
              },
              "type": {
                "description": "Type of the secret.\n\nThis is the same field as the secret type field in v1/Secret:\nIt can be \"Opaque\" (default), or \"kubernetes.io/tls\".\n\nIf type is \"kubernetes.io/tls\", then \"literals\" or \"files\" must have exactly two\nkeys: \"tls.key\" and \"tls.crt\"\n",
                "type": "string"
              }
            }
          }
        },
        "vars": {
          "description": "Vars allow things modified by kustomize to be injected into a\ncontainer specification. A var is a name (e.g. FOO) associated\nwith a field in a specific resource instance.  The field must\ncontain a value of type string, and defaults to the name field\nof the instance.  Any appearance of \"$(FOO)\" in the container\nspec will be replaced at kustomize build time, after the final\nvalue of the specified field has been determined.\n",
          "type": "array",
          "items": {
            "properties": {
              "fieldref": {
                "description": "FieldRef refers to the field of the object referred to by\nObjRef whose value will be extracted for use in\nreplacing $(FOO).\nIf unspecified, this defaults to fieldPath: $defaultFieldPath\n",
                "properties": {
                  "fieldPath": {
                    "type": "string"
                  }
                }
              },
              "name": {
                "description": "Value of identifier name e.g. FOO used in container args, annotations\nAppears in pod template as $(FOO)\n",
                "type": "string"
              },
              "objref": {
                "description": "ObjRef must refer to a Kubernetes resource under the\npurview of this kustomization. ObjRef should use the\nraw name of the object (the name specified in its YAML,\nbefore addition of a namePrefix and a nameSuffix).\n",
                "properties": {
                  "apiVersion": {
                    "type": "string"
                  },
                  "group": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
